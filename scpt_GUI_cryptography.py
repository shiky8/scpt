# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'scpt_gui_cryptography.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from cryptography_me_she import aes, hashs, rsa, bases

class Ui_MainWindow_crypto(object):
    hashType="md5"
    encode_deocde="encode"
    crpto_type="symmetric"
    crpto_sub_type=""
    def setupUi(self, MainWindow_crypto):
        MainWindow_crypto.setObjectName("MainWindow")
        MainWindow_crypto.resize(1480, 656)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("scpt.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        MainWindow_crypto.setWindowIcon(icon)
        self.centralwidget = QtWidgets.QWidget(MainWindow_crypto)
        self.centralwidget.setObjectName("centralwidget")
        self.fram1 = QtWidgets.QFrame(self.centralwidget)
        self.fram1.setGeometry(QtCore.QRect(0, 60, 521, 501))
        self.fram1.setStyleSheet("background-color: rgb(123, 29, 255);")
        self.fram1.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.fram1.setFrameShadow(QtWidgets.QFrame.Raised)
        self.fram1.setObjectName("fram1")
        self.comboBox = QtWidgets.QComboBox(self.fram1)
        self.comboBox.setGeometry(QtCore.QRect(20, 130, 87, 32))
        self.comboBox.setStyleSheet("background-color: rgb(183, 67, 255);")
        self.comboBox.setObjectName("comboBox")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox_2 = QtWidgets.QComboBox(self.fram1)
        self.comboBox_2.setGeometry(QtCore.QRect(190, 130, 111, 32))
        self.comboBox_2.setStyleSheet("background-color: rgb(183, 67, 255);")
        self.comboBox_2.setObjectName("comboBox_2")
        self.comboBox_2.addItem("")
        self.comboBox_2.addItem("")
        self.comboBox_2.addItem("")
        self.label = QtWidgets.QLabel(self.fram1)
        self.label.setGeometry(QtCore.QRect(20, 200, 71, 18))
        self.label.setObjectName("label")

        self.label_ke = QtWidgets.QLabel(self.fram1)
        self.label_ke.setGeometry(QtCore.QRect(20, 250, 71, 18))
        self.label_ke.setObjectName("label_ke")

        self.label_2 = QtWidgets.QLabel(self.fram1)
        self.label_2.setGeometry(QtCore.QRect(10, 310, 58, 18))
        self.label_2.setObjectName("label_2")
        self.lineEdit = QtWidgets.QLineEdit(self.fram1)
        self.lineEdit.setGeometry(QtCore.QRect(90, 190, 321, 41))
        self.lineEdit.setObjectName("lineEdit")
        self.lineEdit.setStyleSheet("background-color: rgb(0, 85, 0);")

        self.lineEdit_ke = QtWidgets.QLineEdit(self.fram1)
        self.lineEdit_ke.setGeometry(QtCore.QRect(90, 240, 321, 41))
        self.lineEdit_ke.setObjectName("lineEdit_ke")
        self.lineEdit_ke.setStyleSheet("background-color: rgb(0, 85, 0);")

        self.lineEdit_2 = QtWidgets.QLineEdit(self.fram1)
        self.lineEdit_2.setGeometry(QtCore.QRect(70, 300, 361, 41))
        self.lineEdit_2.setObjectName("lineEdit_2")
        self.lineEdit_2.setStyleSheet("background-color: rgb(0, 85, 0);")
        self.comboBox_3 = QtWidgets.QComboBox(self.fram1)
        self.comboBox_3.setGeometry(QtCore.QRect(340, 130, 171, 32))
        self.comboBox_3.setStyleSheet("background-color: rgb(183, 67, 255);")
        self.comboBox_3.setObjectName("comboBox_3")
        self.pushButton_4 = QtWidgets.QPushButton(self.fram1)
        self.pushButton_4.setGeometry(QtCore.QRect(420, 240, 88, 34))
        self.pushButton_4.setStyleSheet("background-color: rgb(0, 85, 255);")
        self.pushButton_4.setObjectName("pushButton_4")
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(0, 10, 151, 34))
        self.pushButton.setStyleSheet("background-color: rgb(0, 85, 255);")
        self.pushButton.setObjectName("pushButton")
        self.pushButton_2 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_2.setGeometry(QtCore.QRect(270, 10, 141, 34))
        self.pushButton_2.setStyleSheet("background-color: rgb(0, 85, 255);")
        self.pushButton_2.setObjectName("pushButton_2")
        self.pushButton_3 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_3.setGeometry(QtCore.QRect(550, 10, 88, 34))
        self.pushButton_3.setStyleSheet("background-color: rgb(0, 85, 255);")
        self.pushButton_3.setObjectName("pushButton_3")
        self.frame2 = QtWidgets.QFrame(self.centralwidget)
        self.frame2.setGeometry(QtCore.QRect(530, 60, 481, 501))
        self.frame2.setStyleSheet("background-color: rgb(255, 65, 246);")
        self.frame2.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame2.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame2.setObjectName("frame2")
        self.comboBox_4 = QtWidgets.QComboBox(self.frame2)
        self.comboBox_4.setGeometry(QtCore.QRect(100, 100, 101, 41))
        self.comboBox_4.setStyleSheet("background-color: rgb(183, 67, 255);")
        self.comboBox_4.setObjectName("comboBox_4")
        self.comboBox_4.addItem("")
        self.comboBox_4.addItem("")
        self.comboBox_4.addItem("")
        self.comboBox_4.addItem("")
        self.comboBox_4.addItem("")
        self.comboBox_4.addItem("")
        self.comboBox_4.addItem("")
        self.label_3 = QtWidgets.QLabel(self.frame2)
        self.label_3.setGeometry(QtCore.QRect(20, 110, 81, 18))
        self.label_3.setObjectName("label_3")
        self.label_4 = QtWidgets.QLabel(self.frame2)
        self.label_4.setGeometry(QtCore.QRect(20, 190, 58, 18))
        self.label_4.setObjectName("label_4")
        self.label_5 = QtWidgets.QLabel(self.frame2)
        self.label_5.setGeometry(QtCore.QRect(20, 300, 58, 18))
        self.label_5.setObjectName("label_5")
        self.lineEdit_3 = QtWidgets.QLineEdit(self.frame2)
        self.lineEdit_3.setGeometry(QtCore.QRect(60, 180, 251, 41))
        self.lineEdit_3.setObjectName("lineEdit_3")
        self.lineEdit_3.setStyleSheet("background-color: rgb(0, 85, 0);")
        self.lineEdit_4 = QtWidgets.QLineEdit(self.frame2)
        self.lineEdit_4.setGeometry(QtCore.QRect(80, 290, 251, 41))
        self.lineEdit_4.setObjectName("lineEdit_4")
        self.lineEdit_4.setStyleSheet("background-color: rgb(0, 85, 0);")
        self.pushButton_5 = QtWidgets.QPushButton(self.frame2)
        self.pushButton_5.setGeometry(QtCore.QRect(350, 180, 88, 34))
        self.pushButton_5.setStyleSheet("background-color: rgb(0, 85, 255);")
        self.pushButton_5.setObjectName("pushButton_5")
        self.frame_3 = QtWidgets.QFrame(self.centralwidget)
        self.frame_3.setGeometry(QtCore.QRect(1060, 70, 481, 501))
        self.frame_3.setStyleSheet("background-color: rgb(255, 80, 127);")
        self.frame_3.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_3.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_3.setObjectName("frame_3")
        self.label_6 = QtWidgets.QLabel(self.frame_3)
        self.label_6.setGeometry(QtCore.QRect(30, 160, 58, 18))
        self.label_6.setObjectName("label_6")
        self.label_7 = QtWidgets.QLabel(self.frame_3)
        self.label_7.setGeometry(QtCore.QRect(20, 290, 81, 18))
        self.label_7.setObjectName("label_7")
        self.lineEdit_5 = QtWidgets.QLineEdit(self.frame_3)
        self.lineEdit_5.setGeometry(QtCore.QRect(110, 160, 241, 32))
        self.lineEdit_5.setObjectName("lineEdit_5")
        self.lineEdit_5.setStyleSheet("background-color: rgb(0, 85, 0);")

        # self.lineEdit_6 = QtWidgets.QLineEdit(self.frame_3)
        # self.lineEdit_6.setGeometry(QtCore.QRect(100, 281, 361, 41))
        # self.lineEdit_6.setObjectName("lineEdit_6")
        # self.lineEdit_6.setStyleSheet("background-color: rgb(0, 85, 0);")

        self.textEdit_2222 = QtWidgets.QTextEdit(self.frame_3)
        self.textEdit_2222.setGeometry(QtCore.QRect(100, 281, 381, 201))
        self.textEdit_2222.setObjectName("textEdit_2222")
        self.textEdit_2222.setStyleSheet("background-color: rgb(0, 85, 0);")


        self.pushButton_6 = QtWidgets.QPushButton(self.frame_3)
        self.pushButton_6.setGeometry(QtCore.QRect(360, 160, 88, 34))
        self.pushButton_6.setStyleSheet("background-color: rgb(0, 85, 255);")
        self.pushButton_6.setObjectName("pushButton_6")
        MainWindow_crypto.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow_crypto)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1480, 30))
        self.menubar.setObjectName("menubar")
        self.menuwindows = QtWidgets.QMenu(self.menubar)
        self.menuwindows.setObjectName("menuwindows")
        self.menupayload = QtWidgets.QMenu(self.menuwindows)
        self.menupayload.setObjectName("menupayload")
        self.menuhelp = QtWidgets.QMenu(self.menubar)
        self.menuhelp.setObjectName("menuhelp")
        MainWindow_crypto.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow_crypto)
        self.statusbar.setObjectName("statusbar")
        MainWindow_crypto.setStatusBar(self.statusbar)
        self.actionabout = QtWidgets.QAction(MainWindow_crypto)
        self.actionabout.setObjectName("actionabout")
        self.actionweb = QtWidgets.QAction(MainWindow_crypto)
        self.actionweb.setObjectName("actionweb")
        self.actionMITM = QtWidgets.QAction(MainWindow_crypto)
        self.actionMITM.setObjectName("actionMITM")
        self.actiongenerate_payload = QtWidgets.QAction(MainWindow_crypto)
        self.actiongenerate_payload.setObjectName("actiongenerate_payload")
        self.actionbotnet = QtWidgets.QAction(MainWindow_crypto)
        self.actionbotnet.setObjectName("actionbotnet")
        self.actionreverse_shell = QtWidgets.QAction(MainWindow_crypto)
        self.actionreverse_shell.setObjectName("actionreverse_shell")
        self.actionBrute_force = QtWidgets.QAction(MainWindow_crypto)
        self.actionBrute_force.setObjectName("actionBrute_force")
        self.actionPhishing = QtWidgets.QAction(MainWindow_crypto)
        self.actionPhishing.setObjectName("actionPhishing")
        self.actionbtc_exploit = QtWidgets.QAction(MainWindow_crypto)
        self.actionbtc_exploit.setObjectName("actionbtc_exploit")
        self.actiongoogle_dork = QtWidgets.QAction(MainWindow_crypto)
        self.actiongoogle_dork.setObjectName("actiongoogle_dork")
        self.actionport_scan = QtWidgets.QAction(MainWindow_crypto)
        self.actionport_scan.setObjectName("actionport_scan")
        self.actionVulnerability_scan = QtWidgets.QAction(MainWindow_crypto)
        self.actionVulnerability_scan.setObjectName("actionVulnerability_scan")
        self.menupayload.addAction(self.actiongenerate_payload)
        self.menupayload.addAction(self.actionbotnet)
        self.menupayload.addAction(self.actionreverse_shell)
        self.menuwindows.addAction(self.actionweb)
        self.menuwindows.addAction(self.actionMITM)
        self.menuwindows.addAction(self.menupayload.menuAction())
        self.menuwindows.addAction(self.actionBrute_force)
        self.menuwindows.addAction(self.actionPhishing)
        self.menuwindows.addAction(self.actionbtc_exploit)
        self.menuwindows.addAction(self.actiongoogle_dork)
        self.menuwindows.addAction(self.actionport_scan)
        self.menuwindows.addAction(self.actionVulnerability_scan)
        self.menuhelp.addAction(self.actionabout)
        self.menubar.addAction(self.menuwindows.menuAction())
        self.menubar.addAction(self.menuhelp.menuAction())

        self.frame2.hide()
        self.fram1.hide()
        self.frame_3.hide()
        self.frame2.setGeometry(QtCore.QRect(0, 60, 521, 501))
        self.frame_3.setGeometry(QtCore.QRect(0, 60, 521, 501))

        self.retranslateUi(MainWindow_crypto)
        self.pushButton.clicked.connect(self.fram1.show)
        self.pushButton.clicked.connect(self.frame2.hide)
        self.pushButton.clicked.connect(self.frame_3.hide)
        self.pushButton_2.clicked.connect(self.fram1.hide)
        self.pushButton_2.clicked.connect(self.frame2.show)
        self.pushButton_2.clicked.connect(self.frame_3.hide)
        self.pushButton_3.clicked.connect(self.fram1.hide)
        self.pushButton_3.clicked.connect(self.frame_3.show)
        self.pushButton_3.clicked.connect(self.frame2.hide)
        self.pushButton_3.clicked.connect(self.fram1.hide)
        QtCore.QMetaObject.connectSlotsByName(MainWindow_crypto)

    def aboutss(self):
        from scpt_GUI_about import Ui_MainWindow_about
        # code the 2nd screen here
        self.Form = QtWidgets.QMainWindow()
        self.ui = Ui_MainWindow_about()
        self.ui.setupUi(self.Form)
        # MainWindow_crypto.close()
        self.Form.show()

    def websss(self, MainWindow_crypto):
        from scpt_GUI_Web_scan import Ui_MainWindow_WS
        # code the 2nd screen here
        self.Form = QtWidgets.QMainWindow()
        self.ui = Ui_MainWindow_WS()
        self.ui.setupUi(self.Form)
        MainWindow_crypto.close()
        self.Form.show()

    def mitmsss(self, MainWindow_crypto):
        from scpt_GUI_MITM import Ui_MainWindow_Mitm
        # code the 2nd screen here
        self.Form = QtWidgets.QMainWindow()
        self.ui = Ui_MainWindow_Mitm()
        self.ui.setupUi(self.Form)
        MainWindow_crypto.close()
        self.Form.show()



    def Payload_G(self, MainWindow_crypto):
        from scpt_GUI_generate_payload import Ui_MainWindow_GP
        # code the 2nd screen here
        self.Form = QtWidgets.QMainWindow()
        self.ui = Ui_MainWindow_GP()
        self.ui.setupUi(self.Form)
        MainWindow_crypto.close()
        self.Form.show()

    def Payload_Rev(self, MainWindow_crypto):
        from scpt_GUI_Reverse_shell import Ui_MainWindow_RS
        # code the 2nd screen here
        self.Form = QtWidgets.QMainWindow()
        self.ui = Ui_MainWindow_RS()
        self.ui.setupUi(self.Form)
        MainWindow_crypto.close()
        self.Form.show()

    def Payload_bot(self, MainWindow_crypto):
        from scpt_GUI_botnet import Ui_MainWindow_botnet
        # code the 2nd screen here
        self.Form = QtWidgets.QMainWindow()
        self.ui = Ui_MainWindow_botnet()
        self.ui.setupUi(self.Form)
        MainWindow_crypto.close()
        self.Form.show()

    def Brutessss(self, MainWindow_crypto):
        from scpt_GUI_brute_force import Ui_MainWindow_brute
        # code the 2nd screen here
        self.Form = QtWidgets.QMainWindow()
        self.ui = Ui_MainWindow_brute()
        self.ui.setupUi(self.Form)
        MainWindow_crypto.close()
        self.Form.show()

    def Phisssss(self, MainWindow_crypto):
        from scpt_GUI_Phishing import Ui_MainWindow_Ph
        # code the 2nd screen here
        self.Form = QtWidgets.QMainWindow()
        self.ui = Ui_MainWindow_Ph()
        self.ui.setupUi(self.Form)
        MainWindow_crypto.close()
        self.Form.show()

    def BTC_esss(self, MainWindow_crypto):
        from scpt_GUI_btc_exploit import Ui_MainWindow_btc
        # code the 2nd screen here
        self.Form = QtWidgets.QMainWindow()
        self.ui = Ui_MainWindow_btc()
        self.ui.setupUi(self.Form)
        MainWindow_crypto.close()
        self.Form.show()

    def Googlesss(self, MainWindow_crypto):
        from scpt_GUI_Google_Dork import Ui_MainWindow_GD
        # code the 2nd screen here
        self.Form = QtWidgets.QMainWindow()
        self.ui = Ui_MainWindow_GD()
        self.ui.setupUi(self.Form)
        MainWindow_crypto.close()
        self.Form.show()

    def Port_scansss(self, MainWindow_crypto):
        from scpt_GUI_Port_scan import Ui_MainWindow_PS
        # code the 2nd screen here
        self.Form = QtWidgets.QMainWindow()
        self.ui = Ui_MainWindow_PS()
        self.ui.setupUi(self.Form)
        MainWindow_crypto.close()
        self.Form.show()

    def vunlssss(self, MainWindow_crypto):
        from scpt_GUI_vulnerability_search import Ui_MainWindow_VS
        # code the 2nd screen here
        self.Form = QtWidgets.QMainWindow()
        self.ui = Ui_MainWindow_VS()
        self.ui.setupUi(self.Form)
        MainWindow_crypto.close()
        self.Form.show()

    def Hash_namesss(self):
        from hash_Name.hash_name import HASH_Name
        # hash: str = str(input("hash: "))
        hash = str(self.lineEdit_5.text())
        # hash="716f6e863f744b9ac22c97ec7b76ea5f5908bc5b2f67c61510bfc4751384ea7a"
        # hash="c6cbd89c926ab525c242e6621f2f5fa73aa4afe3d9e24aed727faaadd6af38b620bdb623dd2b4788b1c8086984af8706"
        print("hash: ", hash, "\nHash_len: ", len(hash))
        HN = HASH_Name()
        Houtput: str = HN.hahs_type(hash)
        print(Houtput)
        self.textEdit_2222.setText(str(Houtput))
    def hashtyes_brt(self,index):
        self.hashType = self.comboBox_4.model().itemFromIndex(index)
    def hash_brTfc(self):
        from hash_bruutefrocer.hash_brute import Hash_Brut
        HBrut = Hash_Brut()
        hash: str = str(self.lineEdit_3.text())
        try:
            HB_Output: str = HBrut.hashdecod(str(self.hashType.text()), str(hash))
            print(HB_Output)
            self.lineEdit_4.setText(str(HB_Output).replace('b', '').replace("'", ''))
        except:
            HB_Output: str = HBrut.hashdecod(self.hashType, str(hash))
            print(HB_Output)
            self.lineEdit_4.setText(str(HB_Output).replace('b', '').replace("'", ''))
    def crpto_enco_deocde(self,index):
        self.encode_deocde=self.comboBox.model().itemFromIndex(index).text()
        print(self.encode_deocde)
        if (self.encode_deocde == "decode"):
        # self.comboBox_2.clear()
        # self.comboBox_2.addItems(["symmetric"])
        # self.comboBox_2.addItems(["asymmetric"])
            index = self.comboBox_2.findText("hash")
            self.comboBox_2.removeItem(index)
            self.comboBox_2.addItems(["bases"])
        else:
            # self.comboBox_2.clear()
            self.comboBox_2.addItems(["hash"])
            index = self.comboBox_2.findText("bases")
            self.comboBox_2.removeItem(index)
    def crpto_typeeee(self,index):
        _translate = QtCore.QCoreApplication.translate
        self.crpto_type=self.comboBox_2.model().itemFromIndex(index).text()
        print(self.crpto_type)
        if(self.crpto_type=="symmetric"):
            # self.comboBox_3.setItemText(0, _translate("MainWindow", "AES"))
            self.comboBox_3.clear()
            self.comboBox_3.addItems(["AES"])
        elif(self.crpto_type=="asymmetric"):
            self.comboBox_3.clear()
            # self.comboBox_3.setItemText(0, _translate("MainWindow", "RSA"))
            self.comboBox_3.addItems(["RSA"])
        elif (self.crpto_type == "bases"):
            self.comboBox_3.addItems(["base64"])
            self.comboBox_3.addItems(["base16"])
            self.comboBox_3.addItems(["base32"])
            self.comboBox_3.addItems(["base85"])
        elif (self.crpto_type == "hash"):
            self.comboBox_3.clear()
            self.comboBox_3.addItems([ "md5"])
            self.comboBox_3.addItems(["sha1"])
            self.comboBox_3.addItems(["sha256"])
            self.comboBox_3.addItems([ "sha3_224"])
            self.comboBox_3.addItems([ "sha224"])
            self.comboBox_3.addItems([ "sha512"])
            self.comboBox_3.addItems(["base64"])
            self.comboBox_3.addItems(["base16"])
            self.comboBox_3.addItems([ "base32"])
            self.comboBox_3.addItems([ "base85"])
    def crpto_sub_typeeee(self,index):
        self.crpto_sub_type=self.comboBox_3.model().itemFromIndex(index).text()
        print(self.crpto_sub_type)
    def crpto_timess(self):
        if(self.encode_deocde=="encode"):
            PlanText=str(self.lineEdit.text())
            print(PlanText)
            if(self.crpto_sub_type=="AES"):
                # aes.cec "0123456789123456"
                ke1 = str(self.lineEdit_ke.text())
                if (len(ke1) == 16):
                    key = bytes(ke1, 'ascii')
                else:
                    print("key size most be 16 ")
                    os._exit(0)
                AES_ED = aes.AES_CG()
                a: List[bytes] = AES_ED.encrp(PlanText, key)
                key: bytes = a[0]
                ciph: bytes = a[1]
                print("encoded= ", str(ciph)[1:])
                print("key= ", str(key)[1:])
                self.lineEdit_2.setText(str(ciph)[1:])
            elif(self.crpto_sub_type=="RSA"):
                # rsa
                RS = rsa.RSA_CG()
                keys = RS.gneKeys()
                print(keys, '\n')
                self.lineEdit_ke.setText(str(keys["privKey"]))
                enc = str(RS.encodme(PlanText, keys["pubkey"]))[1:]
                print("encode= ", enc)
                self.lineEdit_2.setText(str(enc))
            elif ("base" in self.crpto_sub_type):
                BS = bases.Bases()
                BOutput: str = BS.base_encde(self.crpto_sub_type, bytes(PlanText, 'ascii'))
                print(BOutput)
                self.lineEdit_2.setText(str(BOutput))
            else:
                HA = hashs.Hashing()
                hash: str = HA.hashing(self.crpto_sub_type, PlanText)
                print(hash)
                self.lineEdit_2.setText(str(hash))
        elif(self.encode_deocde=="decode"):
            cipher = str(self.lineEdit.text())
            if (self.crpto_sub_type == "AES"):
                ciph = bytes(cipher, 'ascii')
                # ke1 = "0123456789123456"
                # if (len(ke1) == 16):
                #     key = bytes(ke1, 'ascii')
                # else:
                #     print("key size most be 16 ")   "0123456789123456"
                key = bytes(str(self.lineEdit_ke.text()), 'ascii')
                AES_ED = aes.AES_CG()
                try:
                    dec: str = AES_ED.decp(ciph, key)
                    print("decode= ", dec)
                    self.lineEdit_2.setText(str(dec))
                except:
                    print("wrong key")
                    self.lineEdit_2.setText("wrong key")
            elif (self.crpto_sub_type == "RSA"):
                RS = rsa.RSA_CG()
                # keo = open("privkey.txt", 'r')
                # kiooo = ""
                # for i in keo:
                #     kiooo += i
                    # print(i)
                # print(kiooo)
                # dec = str(RS.decome(enc22, kiooo))[1:]
                # key= open("publickey.txt", 'r').read
                # dec = str(RS.decome(cipher, kiooo))[1:]
                dec = str(RS.decome(cipher, str(self.lineEdit_ke.text())))[1:]
                print("decode= ", dec)
                self.lineEdit_2.setText(str(dec))
            elif ("base" in self.crpto_sub_type ):
                BS = bases.Bases()
                BOutput = BS.base_dencde(self.crpto_sub_type , cipher)
                print(BOutput)
                self.lineEdit_2.setText(str(BOutput))


    def retranslateUi(self, MainWindow_crypto):
        _translate = QtCore.QCoreApplication.translate
        MainWindow_crypto.setWindowTitle(_translate("MainWindow", "SCPT-cryptography"))
        self.comboBox.setItemText(0, _translate("MainWindow", "encode"))
        self.comboBox.setItemText(1, _translate("MainWindow", "decode"))
        self.comboBox.view().pressed.connect(self.crpto_enco_deocde)
        self.comboBox_2.setItemText(0, _translate("MainWindow", "symmetric"))
        self.comboBox_2.setItemText(1, _translate("MainWindow", "asymmetric"))
        self.comboBox_2.setItemText(2, _translate("MainWindow", "hash"))
        self.comboBox_2.view().pressed.connect(self.crpto_typeeee)
        self.comboBox_3.view().pressed.connect(self.crpto_sub_typeeee)
        self.label.setText(_translate("MainWindow", "ciphertext:"))
        self.label_ke.setText(_translate("MainWindow", "Key:"))
        self.label_2.setText(_translate("MainWindow", "Plaintext:"))
        self.pushButton_4.setText(_translate("MainWindow", "sub"))
        self.pushButton_4.clicked.connect(self.crpto_timess)
        self.pushButton.setText(_translate("MainWindow", "encode/decode"))
        self.pushButton_2.setText(_translate("MainWindow", "hash_bruutefrocer"))
        self.pushButton_3.setText(_translate("MainWindow", "hash_Name"))
        self.comboBox_4.setItemText(0, _translate("MainWindow", "md5"))
        self.comboBox_4.setItemText(1, _translate("MainWindow", "sha1"))
        self.comboBox_4.setItemText(2, _translate("MainWindow", "sha256"))
        self.comboBox_4.setItemText(3, _translate("MainWindow", "sha224"))
        self.comboBox_4.setItemText(4, _translate("MainWindow", "sha512"))
        self.comboBox_4.setItemText(5, _translate("MainWindow", "base"))
        self.comboBox_4.setItemText(6, _translate("MainWindow", "sha3_224"))
        self.comboBox_4.view().pressed.connect(self.hashtyes_brt)
        self.label_3.setText(_translate("MainWindow", "hash_name:"))
        self.label_4.setText(_translate("MainWindow", "hash:"))
        self.label_5.setText(_translate("MainWindow", "Plaintext:"))
        self.pushButton_5.setText(_translate("MainWindow", "sub"))
        self.pushButton_5.clicked.connect(self.hash_brTfc)
        self.label_6.setText(_translate("MainWindow", "hash:"))
        self.label_7.setText(_translate("MainWindow", "hash_name:"))
        self.pushButton_6.setText(_translate("MainWindow", "sub"))
        self.pushButton_6.clicked.connect(self.Hash_namesss)
        self.menuwindows.setTitle(_translate("MainWindow", "windows"))
        self.menupayload.setTitle(_translate("MainWindow", "payload"))
        self.menuhelp.setTitle(_translate("MainWindow", "help"))
        self.actionabout.setText(_translate("MainWindow", "about"))
        self.actionweb.setText(_translate("MainWindow", "web"))
        self.actionMITM.setText(_translate("MainWindow", "MITM"))
        self.actiongenerate_payload.setText(_translate("MainWindow", "generate-payload"))
        self.actionbotnet.setText(_translate("MainWindow", "botnet"))
        self.actionreverse_shell.setText(_translate("MainWindow", "reverse-shell"))
        self.actionBrute_force.setText(_translate("MainWindow", "Brute-force"))
        self.actionPhishing.setText(_translate("MainWindow", "Phishing"))
        self.actionbtc_exploit.setText(_translate("MainWindow", "btc-exploit"))
        self.actiongoogle_dork.setText(_translate("MainWindow", "google-dork"))
        self.actionport_scan.setText(_translate("MainWindow", "port-scan"))
        self.actionVulnerability_scan.setText(_translate("MainWindow", "Vulnerability-scan"))

        self.actionweb.triggered.connect(lambda:self.websss(MainWindow_crypto))
        self.actionMITM.triggered.connect(lambda:self.mitmsss(MainWindow_crypto))
        self.actionBrute_force.triggered.connect(lambda:self.Brutessss(MainWindow_crypto))
        self.actionPhishing.triggered.connect(lambda:self.Phisssss(MainWindow_crypto))
        self.actiongenerate_payload.triggered.connect(lambda:self.Payload_G(MainWindow_crypto))
        self.actionbotnet.triggered.connect(lambda:self.Payload_bot(MainWindow_crypto))
        self.actionreverse_shell.triggered.connect(lambda:self.Payload_Rev(MainWindow_crypto))
        self.actionbtc_exploit.triggered.connect(lambda:self.BTC_esss(MainWindow_crypto))
        self.actiongoogle_dork.triggered.connect(lambda:self.Googlesss(MainWindow_crypto))
        self.actionport_scan.triggered.connect(lambda:self.Port_scansss(MainWindow_crypto))
        self.actionVulnerability_scan.triggered.connect(lambda:self.vunlssss(MainWindow_crypto))
        self.actionabout.triggered.connect(self.aboutss)


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow_crypto = QtWidgets.QMainWindow()
    ui = Ui_MainWindow_crypto()
    ui.setupUi(MainWindow_crypto)
    MainWindow_crypto.show()
    sys.exit(app.exec_())
