# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'scpt_gui_reverse_shell.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from  payload import lick
import socket

class Ui_MainWindow_RS(object):
    def setupUi(self, MainWindow_revs):
        MainWindow_revs.setObjectName("MainWindow")
        MainWindow_revs.resize(1329, 604)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("scpt.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        MainWindow_revs.setWindowIcon(icon)
        self.centralwidget = QtWidgets.QWidget(MainWindow_revs)
        self.centralwidget.setObjectName("centralwidget")
        self.frame = QtWidgets.QFrame(self.centralwidget)
        self.frame.setGeometry(QtCore.QRect(0, 0, 791, 551))
        self.frame.setStyleSheet("background-color: rgb(0, 85, 127);")
        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")
        self.label = QtWidgets.QLabel(self.frame)
        self.label.setGeometry(QtCore.QRect(20, 490, 71, 18))
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(self.frame)
        self.label_2.setGeometry(QtCore.QRect(20, 180, 58, 18))
        self.label_2.setObjectName("label_2")
        self.textEdit = QtWidgets.QTextEdit(self.frame)
        self.textEdit.setGeometry(QtCore.QRect(90, 20, 671, 441))
        self.textEdit.setStyleSheet("background-color: rgb(0, 85, 0);")
        self.textEdit.setObjectName("textEdit")
        self.lineEdit = QtWidgets.QLineEdit(self.frame)
        self.lineEdit.setGeometry(QtCore.QRect(100, 480, 571, 51))
        self.lineEdit.setStyleSheet("background-color: rgb(170, 0, 127);")
        self.lineEdit.setObjectName("lineEdit")
        self.pushButton = QtWidgets.QPushButton(self.frame)
        self.pushButton.setGeometry(QtCore.QRect(680, 490, 91, 41))
        self.pushButton.setStyleSheet("background-color: rgb(170, 0, 0);")
        self.pushButton.setObjectName("pushButton")
        self.frame_2 = QtWidgets.QFrame(self.centralwidget)
        self.frame_2.setGeometry(QtCore.QRect(800, 0, 521, 551))
        self.frame_2.setStyleSheet("background-color: rgb(170, 0, 127);")
        self.frame_2.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_2.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_2.setObjectName("frame_2")
        self.label_3 = QtWidgets.QLabel(self.frame_2)
        self.label_3.setGeometry(QtCore.QRect(10, 190, 31, 18))
        self.label_3.setObjectName("label_3")
        self.textEdit_2 = QtWidgets.QTextEdit(self.frame_2)
        self.textEdit_2.setGeometry(QtCore.QRect(50, 20, 451, 401))
        self.textEdit_2.setStyleSheet("background-color: rgb(0, 0, 127);")
        self.textEdit_2.setObjectName("textEdit_2")
        self.textEdit_2.setText("commands:\nclear \t ->> to clear the output_screen\nenum \t ->>to enumrate\nscreenshoot \t ->>>> take screen shot\nstkeylog \t ->>> start keyloger\nspkeylog \t ->>> stop keyloger\nupload filename -t   ->> upload file\ndownload filename \t ->> download file\nshell \t ->> start normal reverse shell")



        self.labelip = QtWidgets.QLabel(self.frame_2)
        self.labelip.setGeometry(QtCore.QRect(90, 450, 120, 50))
        self.labelip.setObjectName("labelip")
        self.labelip.setText("ip")
        self.lineEdit2 = QtWidgets.QLineEdit(self.frame_2)
        self.lineEdit2.setGeometry(QtCore.QRect(120, 450, 120, 50))
        self.lineEdit2.setStyleSheet("background-color: rgb(170, 0, 127);")
        self.lineEdit2.setObjectName("lineEdit2")

        self.labelport = QtWidgets.QLabel(self.frame_2)
        self.labelport.setGeometry(QtCore.QRect(250, 450, 120, 50))
        self.labelport.setObjectName("labelport")
        self.labelport.setText("port")
        self.lineEdit3 = QtWidgets.QLineEdit(self.frame_2)
        self.lineEdit3.setGeometry(QtCore.QRect(290, 450, 120, 50))
        self.lineEdit3.setStyleSheet("background-color: rgb(170, 0, 127);")
        self.lineEdit3.setObjectName("lineEdit3")

        self.pushButton2 = QtWidgets.QPushButton(self.frame_2)
        self.pushButton2.setGeometry(QtCore.QRect(390, 500, 120, 50))
        self.pushButton2.setStyleSheet("background-color: rgb(170, 0, 0);")
        self.pushButton2.setObjectName("pushButton2")

        MainWindow_revs.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow_revs)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1329, 30))
        self.menubar.setObjectName("menubar")
        self.menuwindows = QtWidgets.QMenu(self.menubar)
        self.menuwindows.setObjectName("menuwindows")
        self.menupayload = QtWidgets.QMenu(self.menuwindows)
        self.menupayload.setObjectName("menupayload")
        self.menuHelp = QtWidgets.QMenu(self.menubar)
        self.menuHelp.setObjectName("menuHelp")
        MainWindow_revs.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow_revs)
        self.statusbar.setObjectName("statusbar")
        MainWindow_revs.setStatusBar(self.statusbar)
        self.actionabout = QtWidgets.QAction(MainWindow_revs)
        self.actionabout.setObjectName("actionabout")
        self.actionWEB = QtWidgets.QAction(MainWindow_revs)
        self.actionWEB.setObjectName("actionWEB")
        self.actionMITM = QtWidgets.QAction(MainWindow_revs)
        self.actionMITM.setObjectName("actionMITM")
        self.actioncryptography = QtWidgets.QAction(MainWindow_revs)
        self.actioncryptography.setObjectName("actioncryptography")
        self.actiongenerate_payload = QtWidgets.QAction(MainWindow_revs)
        self.actiongenerate_payload.setObjectName("actiongenerate_payload")
        self.actionbotnet = QtWidgets.QAction(MainWindow_revs)
        self.actionbotnet.setObjectName("actionbotnet")
        self.actionBrute_force = QtWidgets.QAction(MainWindow_revs)
        self.actionBrute_force.setObjectName("actionBrute_force")
        self.actionPhishing = QtWidgets.QAction(MainWindow_revs)
        self.actionPhishing.setObjectName("actionPhishing")
        self.actionbtc_exploit = QtWidgets.QAction(MainWindow_revs)
        self.actionbtc_exploit.setObjectName("actionbtc_exploit")
        self.actiongoogle_dork = QtWidgets.QAction(MainWindow_revs)
        self.actiongoogle_dork.setObjectName("actiongoogle_dork")
        self.actionport_scan = QtWidgets.QAction(MainWindow_revs)
        self.actionport_scan.setObjectName("actionport_scan")
        self.actionVulnerability_scan = QtWidgets.QAction(MainWindow_revs)
        self.actionVulnerability_scan.setObjectName("actionVulnerability_scan")
        self.menupayload.addAction(self.actiongenerate_payload)
        self.menupayload.addAction(self.actionbotnet)
        self.menuwindows.addAction(self.actionWEB)
        self.menuwindows.addAction(self.actionMITM)
        self.menuwindows.addAction(self.actioncryptography)
        self.menuwindows.addAction(self.menupayload.menuAction())
        self.menuwindows.addAction(self.actionBrute_force)
        self.menuwindows.addAction(self.actionPhishing)
        self.menuwindows.addAction(self.actionbtc_exploit)
        self.menuwindows.addAction(self.actiongoogle_dork)
        self.menuwindows.addAction(self.actionport_scan)
        self.menuwindows.addAction(self.actionVulnerability_scan)
        self.menuHelp.addAction(self.actionabout)
        self.menubar.addAction(self.menuwindows.menuAction())
        self.menubar.addAction(self.menuHelp.menuAction())

        self.retranslateUi(MainWindow_revs)
        QtCore.QMetaObject.connectSlotsByName(MainWindow_revs)

    def aboutss(self):
        from scpt_GUI_about import Ui_MainWindow_about
        # code the 2nd screen here
        self.Form = QtWidgets.QMainWindow()
        self.ui = Ui_MainWindow_about()
        self.ui.setupUi(self.Form)
        # MainWindow_revs.close()
        self.Form.show()

    def websss(self, MainWindow_revs):
        from scpt_GUI_Web_scan import Ui_MainWindow_WS
        # code the 2nd screen here
        self.Form = QtWidgets.QMainWindow()
        self.ui = Ui_MainWindow_WS()
        self.ui.setupUi(self.Form)
        MainWindow_revs.close()
        self.Form.show()

    def mitmsss(self, MainWindow_revs):
        from scpt_GUI_MITM import Ui_MainWindow_Mitm
        # code the 2nd screen here
        self.Form = QtWidgets.QMainWindow()
        self.ui = Ui_MainWindow_Mitm()
        self.ui.setupUi(self.Form)
        MainWindow_revs.close()
        self.Form.show()

    def crptosss(self, MainWindow_revs):
        from scpt_GUI_cryptography import Ui_MainWindow_crypto
        # code the 2nd screen here
        self.Form = QtWidgets.QMainWindow()
        self.ui = Ui_MainWindow_crypto()
        self.ui.setupUi(self.Form)
        MainWindow_revs.close()
        self.Form.show()

    def Payload_G(self, MainWindow_revs):
        from scpt_GUI_generate_payload import Ui_MainWindow_GP
        # code the 2nd screen here
        self.Form = QtWidgets.QMainWindow()
        self.ui = Ui_MainWindow_GP()
        self.ui.setupUi(self.Form)
        MainWindow_revs.close()
        self.Form.show()



    def Payload_bot(self, MainWindow_revs):
        from scpt_GUI_botnet import Ui_MainWindow_botnet
        # code the 2nd screen here
        self.Form = QtWidgets.QMainWindow()
        self.ui = Ui_MainWindow_botnet()
        self.ui.setupUi(self.Form)
        MainWindow_revs.close()
        self.Form.show()

    def Brutessss(self, MainWindow_revs):
        from scpt_GUI_brute_force import Ui_MainWindow_brute
        # code the 2nd screen here
        self.Form = QtWidgets.QMainWindow()
        self.ui = Ui_MainWindow_brute()
        self.ui.setupUi(self.Form)
        MainWindow_revs.close()
        self.Form.show()

    def Phisssss(self, MainWindow_revs):
        from scpt_GUI_Phishing import Ui_MainWindow_Ph
        # code the 2nd screen here
        self.Form = QtWidgets.QMainWindow()
        self.ui = Ui_MainWindow_Ph()
        self.ui.setupUi(self.Form)
        MainWindow_revs.close()
        self.Form.show()

    def BTC_esss(self, MainWindow_revs):
        from scpt_GUI_btc_exploit import Ui_MainWindow_btc
        # code the 2nd screen here
        self.Form = QtWidgets.QMainWindow()
        self.ui = Ui_MainWindow_btc()
        self.ui.setupUi(self.Form)
        MainWindow_revs.close()
        self.Form.show()

    def Googlesss(self, MainWindow_revs):
        from scpt_GUI_Google_Dork import Ui_MainWindow_GD
        # code the 2nd screen here
        self.Form = QtWidgets.QMainWindow()
        self.ui = Ui_MainWindow_GD()
        self.ui.setupUi(self.Form)
        MainWindow_revs.close()
        self.Form.show()

    def Port_scansss(self, MainWindow_revs):
        from scpt_GUI_Port_scan import Ui_MainWindow_PS
        # code the 2nd screen here
        self.Form = QtWidgets.QMainWindow()
        self.ui = Ui_MainWindow_PS()
        self.ui.setupUi(self.Form)
        MainWindow_revs.close()
        self.Form.show()

    def vunlssss(self, MainWindow_revs):
        from scpt_GUI_vulnerability_search import Ui_MainWindow_VS
        # code the 2nd screen here
        self.Form = QtWidgets.QMainWindow()
        self.ui = Ui_MainWindow_VS()
        self.ui.setupUi(self.Form)
        MainWindow_revs.close()
        self.Form.show()
    def getconnections(self):
        host = str(self.lineEdit2.text())
        port = int(self.lineEdit3.text())
        self.rv = lick.revab(host,port)
        self.rv.getconnections()
        self.rv.allin()

    def reverseG(self):
        comand = str(self.lineEdit.text())
        if (comand == "clear"):
            self.textEdit.clear()
        else:
            self.rv.GUI_accept_con2(0)
            self.textEdit.append(str(self.rv.GUI_communication(comand)))

    def retranslateUi(self, MainWindow_revs):
        _translate = QtCore.QCoreApplication.translate
        MainWindow_revs.setWindowTitle(_translate("MainWindow", "SCPT-ReverseShell"))
        self.label.setText(_translate("MainWindow", "command:"))
        self.label_2.setText(_translate("MainWindow", "output:"))
        self.pushButton.setText(_translate("MainWindow", "send"))
        self.pushButton.clicked.connect(self.reverseG)
        self.pushButton2.setText(_translate("MainWindow", "getconnections"))
        self.pushButton2.clicked.connect(self.getconnections)
        self.label_3.setText(_translate("MainWindow", "Help:"))
        self.menuwindows.setTitle(_translate("MainWindow", "windows"))
        self.menupayload.setTitle(_translate("MainWindow", "payload"))
        self.menuHelp.setTitle(_translate("MainWindow", "Help"))
        self.actionabout.setText(_translate("MainWindow", "about"))
        self.actionWEB.setText(_translate("MainWindow", "WEB"))
        self.actionMITM.setText(_translate("MainWindow", "MITM"))
        self.actioncryptography.setText(_translate("MainWindow", "cryptography"))
        self.actiongenerate_payload.setText(_translate("MainWindow", "generate-payload"))
        self.actionbotnet.setText(_translate("MainWindow", "botnet"))
        self.actionBrute_force.setText(_translate("MainWindow", "Brute-force"))
        self.actionPhishing.setText(_translate("MainWindow", "Phishing"))
        self.actionbtc_exploit.setText(_translate("MainWindow", "btc-exploit"))
        self.actiongoogle_dork.setText(_translate("MainWindow", "google-dork"))
        self.actionport_scan.setText(_translate("MainWindow", "port-scan"))
        self.actionVulnerability_scan.setText(_translate("MainWindow", "Vulnerability-scan"))

        self.actionWEB.triggered.connect(lambda:self.websss(MainWindow_revs))
        self.actionMITM.triggered.connect(lambda:self.mitmsss(MainWindow_revs))
        self.actioncryptography.triggered.connect(lambda:self.crptosss(MainWindow_revs))
        self.actionBrute_force.triggered.connect(lambda:self.Brutessss(MainWindow_revs))
        self.actionPhishing.triggered.connect(lambda:self.Phisssss(MainWindow_revs))
        self.actiongenerate_payload.triggered.connect(lambda:self.Payload_G(MainWindow_revs))
        self.actionbotnet.triggered.connect(lambda:self.Payload_bot(MainWindow_revs))
        self.actionbtc_exploit.triggered.connect(lambda:self.BTC_esss(MainWindow_revs))
        self.actiongoogle_dork.triggered.connect(lambda:self.Googlesss(MainWindow_revs))
        self.actionport_scan.triggered.connect(lambda:self.Port_scansss(MainWindow_revs))
        self.actionVulnerability_scan.triggered.connect(lambda:self.vunlssss(MainWindow_revs))
        self.actionabout.triggered.connect(self.aboutss)


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow_revs = QtWidgets.QMainWindow()
    ui = Ui_MainWindow_RS()
    ui.setupUi(MainWindow_revs)
    MainWindow_revs.show()
    sys.exit(app.exec_())
